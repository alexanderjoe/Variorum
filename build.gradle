import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'com.gradleup.shadow' version '9.0.0-beta4'
    id 'com.diffplug.spotless' version '7.0.1'
}

group = 'dev.alexanderdiaz'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT")

    //lombok
    compileOnly("org.projectlombok:lombok:1.18.36")
    annotationProcessor("org.projectlombok:lombok:1.18.36")

    // cloud command framework
    implementation("org.incendo:cloud-core:2.0.0")
    implementation("org.incendo:cloud-annotations:2.0.0")
    implementation("org.incendo:cloud-paper:2.0.0-beta.10")
    implementation("org.incendo:cloud-minecraft-extras:2.0.0-beta.10")

    var scoreboardLibraryVersion = "2.2.2"
    implementation("net.megavex:scoreboard-library-api:$scoreboardLibraryVersion")
    runtimeOnly("net.megavex:scoreboard-library-implementation:$scoreboardLibraryVersion")
    runtimeOnly("net.megavex:scoreboard-library-modern:$scoreboardLibraryVersion")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

tasks.named('shadowJar', ShadowJar) {
    relocate("org.incendo", "dev.alexanderdiaz.variorum.lib.cloud")
    relocate("io.leangen.geantyref", "dev.alexanderdiaz.variorum.lib.geantyref")
    relocate("xyz.jpenilla.reflectionremapper", "dev.alexanderdiaz.variorum.lib.reflectionremapper")
    relocate("net.fabricmc.mappingio", "dev.alexanderdiaz.variorum.lib.mappingio")

    relocate("net.megavex.scoreboardlibrary", "dev.alexanderdiaz.variorum.lib.scoreboardlibrary")

//    minimize()

    exclude 'META_INF/*.SF'
    exclude 'META_INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

spotless {
    java {
        palantirJavaFormat().formatJavadoc(true)
        formatAnnotations()
        removeUnusedImports()
        trimTrailingWhitespace()
        importOrder()
        cleanthat()
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}